================================================================================
ISSUES
================================================================================
* LEXING

 - approfondire il problema del riconoscimento dei numeri float vs. integer
   (conditional lexing?)


* PARSING

* SEMANTIC

 - Individuazione di un errore semantico: arresto immediato del processo e notifica 
  dell'errore semantico piu' eventuali altri errori sintattici individuati nel frattempo.

 - Tipologie di errori semantici:
    1) Unbounded Variable  (OK)
    2) Attitude Type Mismatch (OK)


* MISCELLANEOUS

 - Warning all'utente per Plan con Head identiche (utilizzo del pattern visitor??)
 - File di output da riga di comando

================================================================================
ROADMAP
================================================================================

 - Gestione degli errori sintattici+semantici
 - TestBench (in progress)
 - Graphics representation of parse tree (cool, but optional :)
 - Slides

================================================================================
FIXED ISSUES
================================================================================
FIXED! - introduzione del token 'variable'
FIXED! - introduzione del token 'not'
FIXED! - prevedere il terminale 'NOT' per il corpo della lambda expr
FIXED! - e` possibile modificare la grammatica per fare in modo che
         l'ultimo LambdaTest debba avere una parentesi tonda?
FIXED! - e` possibile definire la grammatica in modo tale da evitare che
         sequenze del tipo [1,] siano sintatticamente corrette?
         - E' possibile, bisogna solo decidere quale dei due approcci seguire

FIXED! - fare in modo che gli argomenti di Belief/Goal/Action vengano
        "lexati" come 'variable' e non come 'string'

FIXED! - start symbol: necessario prevederlo nella specifica della
        grammatica? (si,fatto)

FIXED! - IntentionList: il terminale che fa la 'ricorsione' va per primo o
        no? C`e` differenza? (si, ma per il parsing LR non e' importante)

 - Incapsulare Lexer e Parser in opportune classi
 - State Pattern invece declaration/usage?
 - Gerarchia di parser: "Good" rules vs. "Bad" rules nelle classi figlie?
 - Error Production: prevedere limitati controlli 'pilotati' con apposite error
   production
 - Errori sintattici: contare il numero di skip: se si supera una certa soglia,
  interrompere il processo e segnalare tutti gli errori all'utente.




 


